using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Microsoft.AspNet.Identity;
using RAAP.Contracts.Common;
using RAAP.Contracts.Risk;
using RAAP.Database;
using RAAP.Web.API.Helpers.Linq;
using Control = RAAP.Contracts.Control.Control;
using WebGrease.Css.Extensions;
using RAAP.Web.API.Helpers.Exceptions;

namespace RAAP.Web.API.Services
{
    public class VulnerabilityService : ServiceBase
    {
        public VulnerabilityService(UserService userService) : base(userService)
        {

        }

        public Contracts.Vulnerability.Vulnerability GetSingle(int id)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                var item = db.Vulnerabilities.FirstOrDefault(a => a.VulnerabilityId == id);
                if (item == null)
                    throw new RAAPNotFoundException("Item not found.");

                return item.ToContract();
            }
        }

        public PagedResult<Contracts.Vulnerability.Vulnerability> Get(PagedQuery pagedQuery, int[] excludeIds = null)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                var itemQuery = db.Vulnerabilities.AsQueryable();

                if (excludeIds != null && excludeIds.Length > 0)
                    itemQuery = itemQuery.Where(t => !excludeIds.Contains(t.VulnerabilityId));

                var totalItems = itemQuery.Count();
                try
                {
                    return new PagedResult<Contracts.Vulnerability.Vulnerability>()
                    {
                        CurrentPage = pagedQuery.Page,
                        TotalItems = totalItems,
                        TotalPages = pagedQuery.CalculatePages(totalItems),
                        Items =
                            itemQuery
                                .OrderByDirection(LinqHelper.OrderByDataContract<Vulnerability>(pagedQuery.OrderByKey),
                                    pagedQuery.IsDescending)
                                .Skip(pagedQuery.ItemsToSkip)
                                .Take(pagedQuery.PageSize)
                                .Select(x => x.ToContract())
                                .ToArray()
                    };
                }
                catch (Exception exception)
                {
                    throw;
                }
            }
        }

        public Contracts.Vulnerability.Vulnerability Create(Contracts.Vulnerability.CreateVulnerability createVulnerability)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                if (db.Vulnerabilities.Any(a => a.Name == createVulnerability.Name))
                    throw new RAAPConflictException("Name is already in use, please try another name.");
                var Vulnerability = createVulnerability.ToDataModel();
                db.Vulnerabilities.Add(Vulnerability);
                db.SaveChanges();

                return Vulnerability.ToContract();
            }
        }

        public Contracts.Vulnerability.Vulnerability Update(Contracts.Vulnerability.UpdateVulnerability updateVulnerability)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                var Vulnerability = db.Vulnerabilities.Include("Controls").FirstOrDefault(a => a.VulnerabilityId == updateVulnerability.VulnerabilityId);
                if (Vulnerability == null)
                    throw new RAAPNotFoundException("Item not found.");
                Vulnerability.ApplyUpdate(updateVulnerability);
                db.SaveChanges();
                return Vulnerability.ToContract();
            }
        }

        public void Delete(int id)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                var Vulnerability = db.Vulnerabilities.FirstOrDefault(a => a.VulnerabilityId == id);
                if (Vulnerability == null)
                    throw new RAAPNotFoundException("Item not found.");
                db.Vulnerabilities.Remove(Vulnerability);
                db.SaveChanges();
            }
        }

        public List<Contracts.Vulnerability.Vulnerability> Search(string query)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                return
                    db.Vulnerabilities.Where(a => a.Name.Contains(query))
                        .OrderBy(a => a.Name)
                        .Take(20).ToList()
                        .Select(a => a.ToContract()).ToList();
            }
        }

        #region Catalog
        public Contracts.Vulnerability.Vulnerability GetSingleCatalog(int id)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                var item = db.Vulnerabilities.FirstOrDefault(a => a.VulnerabilityId == id);
                if (item == null)
                    throw new RAAPNotFoundException("Item not found.");

                return item.ToContract();
            }
        }

        public PagedResult<Contracts.Vulnerability.Vulnerability> GetCatalog(PagedQuery pagedQuery, int[] excludeIds = null)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                var itemQuery = db.Vulnerabilities.AsQueryable();

                if (excludeIds != null && excludeIds.Length > 0)
                    itemQuery = itemQuery.Where(t => !excludeIds.Contains(t.VulnerabilityId));

                var totalItems = itemQuery.Count();
                try
                {
                    return new PagedResult<Contracts.Vulnerability.Vulnerability>()
                    {
                        CurrentPage = pagedQuery.Page,
                        TotalItems = totalItems,
                        TotalPages = pagedQuery.CalculatePages(totalItems),
                        Items =
                            itemQuery
                                .OrderByDirection(LinqHelper.OrderByDataContract<Vulnerability>(pagedQuery.OrderByKey),
                                    pagedQuery.IsDescending)
                                .Skip(pagedQuery.ItemsToSkip)
                                .Take(pagedQuery.PageSize)
                                .Select(x => x.ToContract())
                                .ToArray()
                    };
                }
                catch (Exception exception)
                {
                    throw;
                }
            }
        }

        public Contracts.Vulnerability.Vulnerability CreateCatalog(Contracts.Vulnerability.CreateVulnerability createVulnerability)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                if (db.Vulnerabilities.Any(a => a.Name == createVulnerability.Name))
                    throw new RAAPConflictException("Name is already in use, please try another name.");
                var Vulnerability = createVulnerability.ToDataModel();
                db.Vulnerabilities.Add(Vulnerability);
                db.SaveChanges();

                return Vulnerability.ToContract();
            }
        }

        public Contracts.Vulnerability.VulnerabilityCatalog UpdateCatalog(Contracts.Vulnerability.UpdateVulnerabilityCatalog updateVulnerabilityCatalog)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                var vulnerabilityCatalog = db.VulnerabilityCatalogs.FirstOrDefault(a => a.VulnerabilityCatalogId == updateVulnerabilityCatalog.VulnerabilityId);
                if (vulnerabilityCatalog == null)
                    throw new RAAPNotFoundException("Item not found.");
                vulnerabilityCatalog.ApplyUpdate(updateVulnerabilityCatalog);
                db.SaveChanges();
                return vulnerabilityCatalog.ToContract();
            }
        }

        public void DeleteCatalog(int id)
        {
            using (var db = new RAAPEntities(GetConnectionString()))
            {
                var vulnerabilityCatalog = db.VulnerabilityCatalogs.FirstOrDefault(a => a.VulnerabilityCatalogId == id);
                if (vulnerabilityCatalog == null)
                    throw new RAAPNotFoundException("Item not found.");
                db.VulnerabilityCatalogs.Remove(vulnerabilityCatalog);
                db.SaveChanges();
            }
        }
        #endregion
    }
    public static class VulnerabilitieserviceExtensions
    {
        public static Contracts.Vulnerability.Vulnerability ToContract(this Vulnerability dataItem)
        {
            return new Contracts.Vulnerability.Vulnerability
            {
                VulnerabilityId = dataItem.VulnerabilityId,
                Name = dataItem.Name,
                Description = dataItem.Description,
                //VulnerabilityCatalogId = dataItem.VulnerabilityCatalogId
            };
        }

        public static Vulnerability ToDataModel(this Contracts.Vulnerability.CreateVulnerability create)
        {
            var Vulnerability = new Vulnerability
            {
                Name = create.Name,
                Description = create.Description,
                //VulnerabilityCatalogId = create.VulnerabilityCatalogId,
            };
            return Vulnerability;
        }

        public static void ApplyUpdate(this Vulnerability dataItem, Contracts.Vulnerability.UpdateVulnerability update)
        {
            dataItem.Name = update.Name;
            dataItem.Description = update.Description;
            //dataItem.VulnerabilityCatalogId = update.VulnerabilityCatalogId;
        }

        public static Contracts.Vulnerability.VulnerabilityCatalog ToContract(this VulnerabilityCatalog dataItem)
        {
            return new Contracts.Vulnerability.VulnerabilityCatalog()
            {
                VulnerabilityId = dataItem.VulnerabilityCatalogId,
                Name = dataItem.Name,
            };
        }

        public static VulnerabilityCatalog ToDataModel(this Contracts.Vulnerability.CreateVulnerabilityCatalog create)
        {
            var vulnerabilityCatalog = new VulnerabilityCatalog()
            {
                Name = create.Name,
            };
            return vulnerabilityCatalog;
        }

        public static void ApplyUpdate(this VulnerabilityCatalog dataItem, Contracts.Vulnerability.UpdateVulnerabilityCatalog update)
        {
            dataItem.Name = update.Name;
        }
    }
}